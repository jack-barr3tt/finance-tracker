// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Account defines model for Account.
type Account struct {
	CreatedAt time.Time `json:"created_at"`
	Id        int       `json:"id"`
	Name      string    `json:"name"`
}

// AccountCreateRequest defines model for AccountCreateRequest.
type AccountCreateRequest struct {
	Name string `json:"name"`
}

// AccountCreateResponse defines model for AccountCreateResponse.
type AccountCreateResponse struct {
	Id int `json:"id"`
}

// AccountDeleteResponse defines model for AccountDeleteResponse.
type AccountDeleteResponse struct {
	Id      int    `json:"id"`
	Message string `json:"message"`
}

// Category defines model for Category.
type Category struct {
	CreatedAt time.Time `json:"created_at"`
	Id        int       `json:"id"`
	Name      string    `json:"name"`
}

// CategoryCreateRequest defines model for CategoryCreateRequest.
type CategoryCreateRequest struct {
	Name string `json:"name"`
}

// CategoryCreateResponse defines model for CategoryCreateResponse.
type CategoryCreateResponse struct {
	Id int `json:"id"`
}

// CategoryDeleteResponse defines model for CategoryDeleteResponse.
type CategoryDeleteResponse struct {
	Id      int    `json:"id"`
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
}

// SignupRequest defines model for SignupRequest.
type SignupRequest struct {
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

// SignupResponse defines model for SignupResponse.
type SignupResponse struct {
	Id int `json:"id"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Amount      float32   `json:"amount"`
	Category    *Category `json:"category,omitempty"`
	CreatedAt   time.Time `json:"created_at"`
	Date        time.Time `json:"date"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
}

// TransactionCreateRequest defines model for TransactionCreateRequest.
type TransactionCreateRequest struct {
	Amount      float32 `json:"amount"`
	CategoryId  int     `json:"category_id"`
	Description *string `json:"description,omitempty"`
}

// TransactionCreateResponse defines model for TransactionCreateResponse.
type TransactionCreateResponse struct {
	Id int `json:"id"`
}

// TransactionDeleteResponse defines model for TransactionDeleteResponse.
type TransactionDeleteResponse struct {
	Id      int    `json:"id"`
	Message string `json:"message"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time `json:"created_at"`
	Email     string    `json:"email"`
	Id        int       `json:"id"`
}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PostSignupJSONRequestBody defines body for PostSignup for application/json ContentType.
type PostSignupJSONRequestBody = SignupRequest

// PostUserIdAccountsJSONRequestBody defines body for PostUserIdAccounts for application/json ContentType.
type PostUserIdAccountsJSONRequestBody = AccountCreateRequest

// PostUserIdAccountsAccountIdTransactionsJSONRequestBody defines body for PostUserIdAccountsAccountIdTransactions for application/json ContentType.
type PostUserIdAccountsAccountIdTransactionsJSONRequestBody = TransactionCreateRequest

// PostUserIdCategoriesJSONRequestBody defines body for PostUserIdCategories for application/json ContentType.
type PostUserIdCategoriesJSONRequestBody = CategoryCreateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login)
	PostLogin(c *fiber.Ctx) error

	// (POST /signup)
	PostSignup(c *fiber.Ctx) error

	// (GET /user/{id})
	GetUserId(c *fiber.Ctx, id int) error

	// (GET /user/{id}/accounts)
	GetUserIdAccounts(c *fiber.Ctx, id int) error

	// (POST /user/{id}/accounts)
	PostUserIdAccounts(c *fiber.Ctx, id int) error

	// (DELETE /user/{id}/accounts/{account_id})
	DeleteUserIdAccountsAccountId(c *fiber.Ctx, id int, accountId int) error

	// (GET /user/{id}/accounts/{account_id})
	GetUserIdAccountsAccountId(c *fiber.Ctx, id int, accountId int) error

	// (GET /user/{id}/accounts/{account_id}/transactions)
	GetUserIdAccountsAccountIdTransactions(c *fiber.Ctx, id int, accountId int) error

	// (POST /user/{id}/accounts/{account_id}/transactions)
	PostUserIdAccountsAccountIdTransactions(c *fiber.Ctx, id int, accountId int) error

	// (DELETE /user/{id}/accounts/{account_id}/transactions/{transaction_id})
	DeleteUserIdAccountsAccountIdTransactionsTransactionId(c *fiber.Ctx, id int, accountId int, transactionId int) error

	// (GET /user/{id}/categories)
	GetUserIdCategories(c *fiber.Ctx, id int) error

	// (POST /user/{id}/categories)
	PostUserIdCategories(c *fiber.Ctx, id int) error

	// (DELETE /user/{id}/categories/{category_id})
	DeleteUserIdCategoriesCategoryId(c *fiber.Ctx, id int, categoryId int) error

	// (GET /user/{id}/categories/{category_id})
	GetUserIdCategoriesCategoryId(c *fiber.Ctx, id int, categoryId int) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *fiber.Ctx) error {

	return siw.Handler.PostLogin(c)
}

// PostSignup operation middleware
func (siw *ServerInterfaceWrapper) PostSignup(c *fiber.Ctx) error {

	return siw.Handler.PostSignup(c)
}

// GetUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserId(c, id)
}

// GetUserIdAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetUserIdAccounts(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserIdAccounts(c, id)
}

// PostUserIdAccounts operation middleware
func (siw *ServerInterfaceWrapper) PostUserIdAccounts(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostUserIdAccounts(c, id)
}

// DeleteUserIdAccountsAccountId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserIdAccountsAccountId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Path parameter "account_id" -------------
	var accountId int

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", c.Params("account_id"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter account_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteUserIdAccountsAccountId(c, id, accountId)
}

// GetUserIdAccountsAccountId operation middleware
func (siw *ServerInterfaceWrapper) GetUserIdAccountsAccountId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Path parameter "account_id" -------------
	var accountId int

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", c.Params("account_id"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter account_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserIdAccountsAccountId(c, id, accountId)
}

// GetUserIdAccountsAccountIdTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetUserIdAccountsAccountIdTransactions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Path parameter "account_id" -------------
	var accountId int

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", c.Params("account_id"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter account_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserIdAccountsAccountIdTransactions(c, id, accountId)
}

// PostUserIdAccountsAccountIdTransactions operation middleware
func (siw *ServerInterfaceWrapper) PostUserIdAccountsAccountIdTransactions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Path parameter "account_id" -------------
	var accountId int

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", c.Params("account_id"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter account_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostUserIdAccountsAccountIdTransactions(c, id, accountId)
}

// DeleteUserIdAccountsAccountIdTransactionsTransactionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserIdAccountsAccountIdTransactionsTransactionId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Path parameter "account_id" -------------
	var accountId int

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", c.Params("account_id"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter account_id: %w", err).Error())
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId int

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_id", c.Params("transaction_id"), &transactionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter transaction_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteUserIdAccountsAccountIdTransactionsTransactionId(c, id, accountId, transactionId)
}

// GetUserIdCategories operation middleware
func (siw *ServerInterfaceWrapper) GetUserIdCategories(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserIdCategories(c, id)
}

// PostUserIdCategories operation middleware
func (siw *ServerInterfaceWrapper) PostUserIdCategories(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostUserIdCategories(c, id)
}

// DeleteUserIdCategoriesCategoryId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserIdCategoriesCategoryId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Path parameter "category_id" -------------
	var categoryId int

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", c.Params("category_id"), &categoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter category_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteUserIdCategoriesCategoryId(c, id, categoryId)
}

// GetUserIdCategoriesCategoryId operation middleware
func (siw *ServerInterfaceWrapper) GetUserIdCategoriesCategoryId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Path parameter "category_id" -------------
	var categoryId int

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", c.Params("category_id"), &categoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter category_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserIdCategoriesCategoryId(c, id, categoryId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/login", wrapper.PostLogin)

	router.Post(options.BaseURL+"/signup", wrapper.PostSignup)

	router.Get(options.BaseURL+"/user/:id", wrapper.GetUserId)

	router.Get(options.BaseURL+"/user/:id/accounts", wrapper.GetUserIdAccounts)

	router.Post(options.BaseURL+"/user/:id/accounts", wrapper.PostUserIdAccounts)

	router.Delete(options.BaseURL+"/user/:id/accounts/:account_id", wrapper.DeleteUserIdAccountsAccountId)

	router.Get(options.BaseURL+"/user/:id/accounts/:account_id", wrapper.GetUserIdAccountsAccountId)

	router.Get(options.BaseURL+"/user/:id/accounts/:account_id/transactions", wrapper.GetUserIdAccountsAccountIdTransactions)

	router.Post(options.BaseURL+"/user/:id/accounts/:account_id/transactions", wrapper.PostUserIdAccountsAccountIdTransactions)

	router.Delete(options.BaseURL+"/user/:id/accounts/:account_id/transactions/:transaction_id", wrapper.DeleteUserIdAccountsAccountIdTransactionsTransactionId)

	router.Get(options.BaseURL+"/user/:id/categories", wrapper.GetUserIdCategories)

	router.Post(options.BaseURL+"/user/:id/categories", wrapper.PostUserIdCategories)

	router.Delete(options.BaseURL+"/user/:id/categories/:category_id", wrapper.DeleteUserIdCategoriesCategoryId)

	router.Get(options.BaseURL+"/user/:id/categories/:category_id", wrapper.GetUserIdCategoriesCategoryId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTY/bNhD9KwbbI7ty2ptO3bhIsEULBI2LHhbGgkvNyowtUiGptoah/16QlCzapiw5",
	"lRw72JP1MeTMPL55I9JbREWWCw5cKxRvkaJLyIi9vKdUFFyby1yKHKRmYF9QCURD8kTsuxchM3OFEqLh",
	"B80yQBjpTQ4oRkpLxlNUYsQSY1s9ZlxDCtI85yQD7009oMRIwueCSUhQ/GhGV6bY977YORLPn4BqM2EV",
	"9cxa/QGfC1CBFGq38C/J8rWZYbYEumI8ndRp446Y7BQ9IlC54AqOQwgjcpz4CRe/wBrOd4FRBkqRtC/u",
	"tXUokBnRkAq5uTGS1GGfzZL3UlCQ5vUX0+PQ9xj8qH18fYL8JlLGWwGGjLB1wAtGOVHqHyGT7hDcHN6I",
	"E2G04aDFCni3K2cWmv8jS3mRd+fZMKlQIH+ubu+oyEL14IPQjNw9DVGwNbIxaDaXhCtCNRP8eGKS1d2j",
	"GseL7NnRi3qq8b2EFxSj76KmD0VVE4p26lLiL9IT8/IMa1BUsrzOpqc6hQqiSn1/yiqcTm3yQO2Qpwbh",
	"HTneTKe4He+ntno/SL3h2u9sveqUul26vp+eqY1My68vgH8qkMN0x3ax7M/MWixPcrDESAEtJNObj6YS",
	"XchvgUiQ94Vemrtne/euDvzXv+YIu49HM5N72ySx1DpHpZmY8Rdhg2XaEuwd44RTmMwloSuQk/sPDwij",
	"v0Eqy0X05m56NzU5ihw4yRmK0U/2kVFHvbSRRWuj7hZk4erEQE3M+j8kKEYfhNK2ASCHCCj9ViRWfajg",
	"GlwNkTxfM2pHRZ+UKwQnRF0ytdfjytIB7xhn4/txOh3aV8Vn62uveF2nm0jPosQoUrYLnIbIdYqRMNpv",
	"kCODdNDzAigZi0mRH+FkunK0ZUlpXKQQQOo9aFPSD4lloCQZaJAKxY9bZDhoWVl/h8au6Joq1LIA7CVx",
	"VLKLEVGxShTAwjz3gWiq32bl1/3jolzs4xQRtxVR3YDd15bXCBzTkKkuBOutYfOdRaQkmxColek5uOIT",
	"tXkpBIcv/OB+fOT6D+/Ah1mlMPujbXX1VGlHYj88jhfTfZDsL2f1O5Kk4OAsTbjXI1DhU42hiqufOL2u",
	"xYHUXapoIt18tZ/RTHbrNfeHf/tr16tf+fvzHj3LMx+nb930Yg3fGlt3+iO3x/Zt+HCkOLfio61397+a",
	"qM8t7/omFD082z4y19Mj2s9ZxuJRdcBUHaKc7hCzxvZmNxz+AWiXete2w0r3JVAcXlnD/++MLKstf+wM",
	"tFRthRBtvVPX3qrZLGsdy0X10T8ovho5a/nTbLBS6ytXrytyLH8D1VBZ/hcAAP//G9YTK/AgAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
